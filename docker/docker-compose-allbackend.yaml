# This composition will build and deploy a full working backend to Docker containers. It's ideal for
# deploying a local backend to support frontend development.

services:

  build_java_backend:
    image: "maven:3.9.11-eclipse-temurin-21-alpine"
    working_dir: /home/java_backend
    container_name: build_java_backend
    hostname: build_java_backend
    volumes:
      - ../java_backend:/home/java_backend
      - m2:/root/.m2
    command: /bin/sh -c "mvn clean install ${mvnparms}"

  postgres_db:
    image: postgres:17.6
    restart: always
    shm_size: 128mb
    volumes:
      - pgsqlvolume:/var/lib/postgresql/data
      - ./pg_init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: ${sqlpass}
    container_name: postgres_db
    hostname: postgres_db
    ports:
      - "5432:5432"

  sso-emulator:
    image: ghcr.io/dexidp/dex:latest
    restart: always
    container_name: sso-emulator
    hostname: sso-emulator
    command: ["dex", "serve", "/etc/dex/config.yaml"]
    volumes:
      - ./config.yaml:/etc/dex/config.yaml:ro
    ports:
      - "5556:5556"

  run_java_backend:
    depends_on:
      postgres_db:
        condition: service_started
      build_java_backend:
         condition: service_completed_successfully
      sso-emulator:
        condition: service_started
    image: "maven:3.9.11-eclipse-temurin-21-alpine"
    restart: always
    container_name: backend
    hostname: backend
    working_dir: /home/java_backend
    environment:
      SPRING_DATASOURCE_JDBCURL: "jdbc:postgresql://postgres_db:5432/main?user=pguser&password=${sqlpass}"
      SPRING_DATASOURCETWO_JDBCURL: "jdbc:postgresql://postgres_db:5432/two?user=pguser&password=${sqlpass}"
      SPRING_DATASOURCETHREE_JDBCURL: "jdbc:postgresql://postgres_db:5432/three?user=pguser&password=${sqlpass}"
      OAUTH_ISSUER: "http://sso-emulator:5556"
      NEWUSERISENABLEDBYDEFAULT: true
      FIRSTUSERISADMIN: true
    ports:
      - 8080:8080
    volumes:
      - ../java_backend:/home/java_backend
    #    command: /bin/sh -c "java -Dspring.profiles.active=mockoauth -jar target/JavaBackendExemplar-1.0.0-SNAPSHOT.jar"
    command: /bin/sh -c "java -jar -Dspring.profiles.active=verbose target/JavaBackendExemplar-1.0.0-SNAPSHOT.jar"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 5

  announce_ready:
    depends_on:
      run_java_backend:
        condition: service_healthy
    image: alpine:3.22.1
    container_name: announce_ready
    hostname: announce_ready
    command: "echo '>>>>>>>>>> Backend is ready for access on localhost at port 8080. <<<<<<<<<<'"

volumes:
  m2:
  pgsqlvolume:
    driver: local
