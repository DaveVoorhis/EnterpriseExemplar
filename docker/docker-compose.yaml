# This composition will build and deploy the full stack to Docker containers.

services:

  build_react_frontend:
    image: "node:24"
    user: "node"
    working_dir: /home/node/react_frontend
    container_name: build_react_frontend
    hostname: build_react_frontend
    environment:
      - VITE_SSO_AUTHORITY=http://localhost:5556
      - VITE_API_BASE=http://localhost:8080/api
    volumes:
      - ../react_frontend:/home/node/react_frontend
    command: /bin/sh -c "
        rm -rf dist node_modules package-lock.json;
        ${npmextras}
        npm install;
        npm run build;
        chmod 0755 dist"

  build_java_backend:
    image: "maven:3.9.11-eclipse-temurin-21-alpine"
    working_dir: /home/java_backend
    container_name: build_java_backend
    hostname: build_java_backend
    volumes:
      - ../java_backend:/home/java_backend
      - m2:/root/.m2
    command: /bin/sh -c "mvn clean install ${mvnparms}"

  postgres_db:
    image: postgres:17.6
    restart: always
    shm_size: 128mb
    volumes:
      - pgsqlvolume:/var/lib/postgresql/data
      - ./pg_init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: ${sqlpass}
    container_name: postgres_db
    hostname: postgres_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d user"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s

  sso-emulator:
    image: ghcr.io/dexidp/dex:latest
    restart: always
    container_name: sso-emulator
    hostname: sso-emulator
    command: ["dex", "serve", "/etc/dex/config.yaml"]
    volumes:
      - ./dex_config.yaml:/etc/dex/config.yaml:ro
    ports:
      - "5556:5556"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5556/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s

  run_java_backend:
    depends_on:
      postgres_db:
        condition: service_healthy
      build_java_backend:
        condition: service_completed_successfully
      sso-emulator:
        condition: service_healthy
    image: "maven:3.9.11-eclipse-temurin-21-alpine"
    restart: always
    container_name: backend
    hostname: backend
    working_dir: /home/java_backend
    environment:
      SPRING_DATASOURCE_JDBCURL: "jdbc:postgresql://postgres_db:5432/user?user=pguser&password=${sqlpass}"
      SPRING_DATASOURCEDEMO_JDBCURL: "jdbc:postgresql://postgres_db:5432/demo?user=pguser&password=${sqlpass}"
      SPRING_DATASOURCEEXTRA_JDBCURL: "jdbc:postgresql://postgres_db:5432/extra?user=pguser&password=${sqlpass}"
      OAUTH_ISSUER: "http://sso-emulator:5556"
      NEWUSERISENABLEDBYDEFAULT: true
      FIRSTUSERISADMIN: true
    ports:
      - 8080:8080
    volumes:
      - ../java_backend:/home/java_backend
    command: /bin/sh -c "java -jar target/JavaBackendExemplar-1.0.0-SNAPSHOT.jar"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 5

  run_react_frontend:
    depends_on:
      build_react_frontend:
        condition: service_completed_successfully
    image: nginx:1.29.0
    restart: always
    container_name: frontend
    hostname: frontend
    ports:
      - 80:80
    volumes:
      - ../react_frontend/dist:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 10s
      retries: 5

  announce_ready:
    depends_on:
      run_java_backend:
        condition: service_healthy
      run_react_frontend:
        condition: service_healthy
    image: alpine:3.22.1
    container_name: announce_ready
    hostname: announce_ready
    command: "echo '>>>>>>>>>> Application is ready to access via browser on localhost. <<<<<<<<<<'"

volumes:
  m2:
  pgsqlvolume:
    driver: local

